"#[doc = \" Trait definitions for Nesting ink! messages\"] pub trait Nesting\n{\n    #[doc =\n    \" Add a child NFT (from different collection) to the NFT in this collection.\"]\n    #[doc =\n    \" The status of the added child is `Pending` if caller is not owner of child NFT\"]\n    #[doc =\n    \" The status of the added child is `Accepted` if caller is is owner of child NFT\"]\n    #[doc =\n    \" The caller needs not to be the owner of the to_parent_token_id, but\"]\n    #[doc = \" Caller must be owner of the child NFT,\"]\n    #[doc =\n    \" in order to perform transfer() ownership of the child nft to to_parent_token_id.\"]\n    #[doc = \"\"] #[doc = \" # Requirements:\"]\n    #[doc =\n    \" * `child_contract_address` needs to be added by collecion owner\"]\n    #[doc = \" * `to_parent_token_id` must exist.\"]\n    #[doc = \" * `child_token_id` must exist.\"]\n    #[doc = \" * There cannot be two identical children.\"] #[doc = \"\"]\n    #[doc = \" # Arguments:\"]\n    #[doc =\n    \" * `to_parent_token_id`: is the tokenId of the parent NFT. The receiver of child.\"]\n    #[doc =\n    \" * `child_nft`: (collection_id, token_id) of the child instance.\"]\n    #[doc = \"\"] #[doc = \" # Result:\"]\n    #[doc =\n    \" Ownership of child NFT will be transferred to this contract (cross contract call)\"]\n    #[doc = \" On success emitts `RmrkEvent::ChildAdded`\"]\n    #[doc =\n    \" On success emitts `RmrkEvent::ChildAccepted` - only if caller is already owner of child NFT\"]\n    #[ink(message)] #[ink(selector = 493834582u32)] fn\n    add_child(& mut self, parent_token_id : Id, child_nft : ChildNft) ->\n    Result < (), PSP34Error > ;\n    #[doc =\n    \" Remove a child NFT (from different collection) from token_id in this collection.\"]\n    #[doc =\n    \" The status of added child is `Pending` if caller is not owner of child NFT\"]\n    #[doc =\n    \" The status of added child is `Accepted` if caller is is owner of child NFT\"]\n    #[doc = \"\"] #[doc = \" # Requirements:\"]\n    #[doc = \" * The status of the child is `Accepted`\"] #[doc = \"\"]\n    #[doc = \" # Arguments:\"]\n    #[doc = \" * `parent_token_id`: is the tokenId of the parent NFT.\"]\n    #[doc =\n    \" * `child_nft`: (collection_id, token_id) of the child instance.\"]\n    #[doc = \"\"] #[doc = \" # Result:\"]\n    #[doc =\n    \" Ownership of child NFT will be transferred to parent NFT owner (cross contract call)\"]\n    #[doc = \" On success emitts `RmrkEvent::ChildRemoved`\"] #[ink(message)]\n    #[ink(selector = 669467150u32)] fn\n    remove_child(& mut self, parent_token_id : Id, child_nft : ChildNft) ->\n    Result < (), PSP34Error > ;\n    #[doc =\n    \" Accept a child NFT (from different collection) to be owned by parent token.\"]\n    #[doc = \"\"] #[doc = \" # Requirements:\"]\n    #[doc = \" * The status of the child is `Pending`\"] #[doc = \"\"]\n    #[doc = \" # Arguments:\"]\n    #[doc = \" * `parent_token_id`: is the tokenId of the parent NFT.\"]\n    #[doc =\n    \" * `child_nft`: (collection_id, token_id) of the child instance.\"]\n    #[doc = \"\"] #[doc = \" # Result:\"]\n    #[doc = \" Child Nft is moved from pending to accepted\"]\n    #[doc = \" On success emitts `RmrkEvent::ChildAccepted`\"] #[ink(message)]\n    #[ink(selector = 993928771u32)] fn\n    accept_child(& mut self, parent_token_id : Id, child_nft : ChildNft) ->\n    Result < (), PSP34Error > ;\n    #[doc = \" Reject a child NFT (from different collection).\"] #[doc = \"\"]\n    #[doc = \" # Requirements:\"]\n    #[doc = \" * The status of the child is `Pending`\"] #[doc = \"\"]\n    #[doc = \" # Arguments:\"]\n    #[doc = \" * `parent_token_id`: is the tokenId of the parent NFT.\"]\n    #[doc =\n    \" * `child_nft`: (collection_id, token_id) of the child instance.\"]\n    #[doc = \"\"] #[doc = \" # Result:\"]\n    #[doc = \" Child Nft is removed from pending\"]\n    #[doc = \" On success emitts `RmrkEvent::ChildRejected`\"] #[ink(message)]\n    #[ink(selector = 3710947028u32)] fn\n    reject_child(& mut self, parent_token_id : Id, child_nft : ChildNft) ->\n    Result < (), PSP34Error > ;\n    #[doc =\n    \" Transfer the child NFT from one parent to another (in this collection).\"]\n    #[doc = \"\"] #[doc = \" # Requirements:\"]\n    #[doc = \" * The status of the child is `Accepted`\"] #[doc = \"\"]\n    #[doc = \" # Arguments:\"]\n    #[doc =\n    \" * `current_parent`: current parent tokenId which holds child nft\"]\n    #[doc = \" * `new_parent`: new parent tokenId which will hold child nft\"]\n    #[doc =\n    \" * `child_nft`: (collection_id, token_id) of the child instance.\"]\n    #[doc = \"\"] #[doc = \" # Result:\"]\n    #[doc =\n    \" Ownership of child NFT will be transferred to this contract (cross contract call)\"]\n    #[doc = \" On success emitts `RmrkEvent::ChildAdded`\"]\n    #[doc =\n    \" On success emitts `RmrkEvent::ChildAccepted` - only if caller is already owner of child NFT\"]\n    #[ink(message)] #[ink(selector = 3678614094u32)] fn\n    transfer_child(& mut self, from : Id, to : Id, child_nft : ChildNft) ->\n    Result < (), PSP34Error > ;\n    #[doc = \" Read the number of children on the parent token.\"]\n    #[doc = \" # Arguments:\"]\n    #[doc = \" * `parent_token_id`: parent tokenId to check\"] #[doc = \"\"]\n    #[doc = \" # Result:\"]\n    #[doc =\n    \" Returns the tupple of `(accepted_children, pending_children)` count\"]\n    #[ink(message)] #[ink(selector = 591925356u32)] fn\n    children_balance(& self, parent_token_id : Id) -> Result < (u64, u64),\n    PSP34Error > ;\n}"