import '@polkadot/types-codec/types/registry';
import '@polkadot/types-create/types/augmentRegistry';
import type { AnyString, Codec, CodecClass } from '@polkadot/types-codec/types';
import type { TypeDef } from '@polkadot/types-create/types';
import type { ExtDef } from '@polkadot/types/extrinsic/signedExtensions/types';
import type { MetadataLatest } from '@polkadot/types/interfaces/metadata';
import type { SiField, SiLookupTypeId } from '@polkadot/types/interfaces/scaleInfo';
import type { ChainProperties } from '@polkadot/types/interfaces/system';
import type { Metadata, PortableRegistry } from '@polkadot/types/metadata';
import type { CallFunction as CallFunctionExt } from '@polkadot/types/types/calls';
import type { DetectCodec } from '@polkadot/types/types/detect';
import type { CodecHasher, RegisteredTypes } from '@polkadot/types/types/registry';
declare module '@polkadot/types-codec/types/registry' {
    interface RegistryError {
        fields: SiField[];
    }
    interface Registry {
        readonly firstCallIndex: Uint8Array;
        readonly knownTypes: RegisteredTypes;
        readonly metadata: MetadataLatest;
        readonly unknownTypes: string[];
        readonly signedExtensions: string[];
        findMetaCall(callIndex: Uint8Array): CallFunctionExt;
        clearCache(): void;
        createLookupType(lookupId: SiLookupTypeId | number): string;
        createClass<T extends Codec = Codec, K extends string = string>(type: K): CodecClass<DetectCodec<T, K>>;
        createType<T extends Codec = Codec, K extends string = string>(type: K, ...params: unknown[]): DetectCodec<T, K>;
        get<T extends Codec = Codec, K extends string = string>(name: K, withUnknown?: boolean, knownTypeDef?: TypeDef): CodecClass<DetectCodec<T, K>> | undefined;
        getChainProperties(): ChainProperties | undefined;
        getDefinition(typeName: string): string | undefined;
        getModuleInstances(specName: AnyString, moduleName: string): string[] | undefined;
        setKnownTypes(types: RegisteredTypes): void;
        setChainProperties(properties?: ChainProperties): void;
        setHasher(hasher?: CodecHasher | null): void;
        setLookup(lookup: PortableRegistry): void;
        setMetadata(metadata: Metadata, signedExtensions?: string[], userExtensions?: ExtDef): void;
        setSignedExtensions(signedExtensions?: string[], userExtensions?: ExtDef): void;
    }
}
