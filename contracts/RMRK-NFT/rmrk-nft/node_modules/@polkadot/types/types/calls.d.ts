import type { AnyTuple, CallBase as CallBaseBase, CallFunction as CallFunctionBase, IMethod } from '@polkadot/types-codec/types';
import type { FunctionMetadataLatest } from '@polkadot/types/interfaces/metadata';
import type { Call } from '@polkadot/types/interfaces/runtime';
import type { Registry } from '@polkadot/types/types/registry';
export interface CallBase<A extends AnyTuple, M = FunctionMetadataLatest> extends CallBaseBase<A, M> {
    registry: Registry;
}
export interface CallFunction<A extends AnyTuple = AnyTuple, M = FunctionMetadataLatest> extends CallFunctionBase<A, M> {
    (...args: any[]): Call & IMethod<A, M>;
}
