"#[doc = \" Trait definitions for Equipping RMRK NFTs\"] pub trait Equippable\n{\n    #[doc = \" Used to equip a child nft into a token.\"]\n    #[doc = \" # Requirements\"] #[doc = \"  * Called on Parent token contract\"]\n    #[doc =\n    \"  * If the `Slot` already has an item equipped, the execution will be reverted.\"]\n    #[doc =\n    \"  * If the child can\\'t be used in the given `Slot`, the execution will be reverted.\"]\n    #[doc =\n    \"  * If the base doesn\\'t allow this equip to happen, the execution will be reverted.\"]\n    #[doc = \"    \"] #[doc = \" # Arguments:\"]\n    #[doc = \"  * `token_id ID` of the token that had an asset equipped\"]\n    #[doc =\n    \"  * `asset_id ID` of the asset associated with the token we are equipping into\"]\n    #[doc = \"  * `slot_part_id` ID of the slot we are using to equip\"]\n    #[doc = \"  * `child_nft` Child NFT tuple (CollectionId, Id)\"]\n    #[doc =\n    \"  * `child_asset_id` ID of the asset associated with the token we are equipping\"]\n    #[doc = \" Emits an {ChildAssetEquipped} event.\"] #[ink(message)]\n    #[ink(selector = 894683348u32)] fn\n    equip(& mut self, token_id : Id, asset_id : AssetId, slot_part_id :\n    PartId, child_nft : ChildNft, child_asset_id : AssetId,) -> Result < (),\n    PSP34Error > ; #[doc = \" Used to unequip child from parent token.\"]\n    #[doc = \" # Requirements\"]\n    #[doc =\n    \"  * This can only be called by the owner of the token or by an account that has been granted permission to\"]\n    #[doc = \"  * Called on Parent token contract\"] #[doc = \"\"]\n    #[doc = \" # Arguments:\"]\n    #[doc = \"  * `token_id` ID of the token that had an asset unequipped\"]\n    #[doc =\n    \"  * `asset_id` ID of the asset associated with the token we are unequipping from\"]\n    #[doc = \"  * `slot_part_id` ID of the slot we are using to unequip\"]\n    #[doc = \"  * `child_nft` Child NFT tuple (CollectionId, Id)\"]\n    #[doc =\n    \"  * `child_asset_id` ID of the asset associated with the token we are unequipping\"]\n    #[doc = \" Emits an {ChildAssetUnequipped} event.\"] #[ink(message)]\n    #[ink(selector = 2639471546u32)] fn\n    unequip(& mut self, token_id : Id, slot_part_id : PartId) -> Result < (),\n    PSP34Error > ;\n    #[doc =\n    \" Used to declare that the assets belonging to a given `equippableGroupId` are equippable into the `Slot`\"]\n    #[doc =\n    \" associated with the `partId` of the collection at the specified `parentAddress`\"]\n    #[doc = \" # Requirements\"] #[doc = \"  * Called on Child Token contract\"]\n    #[doc = \"\"] #[doc = \" # Arguments:\"]\n    #[doc = \"  * `equippable_group_id` ID of the equippable group\"]\n    #[doc =\n    \"  * `parent_address` Address of the parent into which the equippable group can be equipped into\"]\n    #[doc =\n    \"  * `part_id` ID of the `Slot` that the items belonging to the equippable group can be equipped into\"]\n    #[ink(message)] #[ink(selector = 317813083u32)] fn\n    set_valid_parent_for_equippable_group(& mut self, equippable_group_id :\n    EquippableGroupId, parent_address : AccountId, part_id : PartId,) ->\n    Result < (), PSP34Error > ;\n    #[doc =\n    \" Used to extend already added Asset with details needed to support equipping.\"]\n    #[doc =\n    \" These details are not present in MultiAsset trait to avoid dependencies on Equippable trait.\"]\n    #[doc = \" # Arguments:\"]\n    #[doc = \"  * `asset_id` ID of the asset being extended\"]\n    #[doc = \"  * `equippableGroupId` ID of the equippable group\"]\n    #[doc =\n    \"  * `partIds` An array of IDs of fixed and slot parts to be included in the asset\"]\n    #[doc =\n    \" Used to get the Equipment object equipped into the specified slot of the desired token.\"]\n    #[doc = \"\"] #[doc = \" # Arguments:\"]\n    #[doc =\n    \"  * `token_id` ID of the token for which we are retrieving the equipped object\"]\n    #[doc =\n    \"  * `slot_part_id` ID of the `Slot` part that we are checking for equipped objects\"]\n    #[ink(message)] #[ink(selector = 3456745102u32)] fn\n    get_equipment(& self, token_id : Id, slot_part_id : PartId) -> Option <\n    Equipment > ;\n    #[doc =\n    \" Used to get the asset and equippable data associated with given `asset_id`.\"]\n    #[doc = \" # Arguments:\"]\n    #[doc = \"  * tokenId ID of the token for which to retrieve the asset\"]\n    #[doc = \"  * asset_id ID of the asset of which we are retrieving\"]\n    #[doc = \" # Returns:\"] #[doc = \"    * asset_id metadataURI,\"]\n    #[doc = \"    * EquippableAsset\"] #[ink(message)]\n    #[ink(selector = 3990824926u32)] fn\n    get_asset_and_equippable_data(& self, token_id : Id, asset_id : AssetId,)\n    -> Result < Asset, PSP34Error > ;\n}"