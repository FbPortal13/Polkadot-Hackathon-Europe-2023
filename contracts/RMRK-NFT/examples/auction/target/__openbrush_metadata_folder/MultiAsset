"#[doc = \" Trait definitions for MultiAsset ink! messages\"] pub trait\nMultiAsset\n{\n    #[doc = \" Used to add a asset entry.\"]\n    #[doc =\n    \" The ID of the asset is automatically assigned to be the next available asset ID.\"]\n    #[doc = \" # Arguments\"] #[doc = \"  * `asset_uri` Uri for the new asset\"]\n    #[doc = \" Emits an {AssetSet} event.\"] #[ink(message)]\n    #[ink(selector = 1411904448u32)] fn\n    add_asset_entry(& mut self, id : AssetId, equippable_group_id :\n    EquippableGroupId, asset_uri : String, part_ids : Vec < PartId >,) ->\n    Result < (), PSP34Error > ; #[doc = \" Used to add an asset to a token.\"]\n    #[doc =\n    \" If the given asset is already added to the token, the execution will be reverted.\"]\n    #[doc = \" If the asset ID is invalid, the execution will be reverted.\"]\n    #[doc =\n    \" If the token already has the maximum amount of pending assets (128), the execution will be\"]\n    #[doc = \" reverted.\"]\n    #[doc =\n    \" If the asset is being added by the current root owner of the token, the asset will be automatically\"]\n    #[doc = \" accepted.\"] #[doc = \" # Arguments\"]\n    #[doc = \"  * tokenId ID of the token to add the asset to\"]\n    #[doc = \"  * assetId ID of the asset to add to the token\"]\n    #[doc =\n    \"  * replacesAssetWithId ID of the asset to replace from the token\\'s list of active assets\"]\n    #[doc = \" Emits an {AssetAddedToToken} event.\"] #[ink(message)]\n    #[ink(selector = 3902005626u32)] fn\n    add_asset_to_token(& mut self, token_id : Id, asset_id : AssetId,\n    replaces_asset_with_id : Option < AssetId >,) -> Result < (), PSP34Error >\n    ; #[doc = \" Accepts an asset at from the pending array of given token.\"]\n    #[doc =\n    \" Migrates the asset from the token\\'s pending asset array to the token\\'s active asset array.\"]\n    #[doc =\n    \" Active assets cannot be removed by anyone, but can be replaced by a new asset.\"]\n    #[doc = \" # Requirements:\"]\n    #[doc =\n    \"  * The caller must own the token or be approved to manage the token\\'s assets\"]\n    #[doc = \"  * `tokenId` must exist.\"]\n    #[doc = \"  * `assetId` must be in the pending_asset list.\"]\n    #[doc = \" # Arguments\"]\n    #[doc =\n    \"  * tokenId ID of the token for which to accept the pending asset\"]\n    #[doc =\n    \"  * assetId ID of the asset expected to be in the pending_asset list.\"]\n    #[doc = \" Emits an {AssetAccepted} event.\"] #[ink(message)]\n    #[ink(selector = 3693999333u32)] fn\n    accept_asset(& mut self, token_id : Id, asset_id : AssetId) -> Result <\n    (), PSP34Error > ;\n    #[doc = \" Rejects an asset from the pending array of given token.\"]\n    #[doc = \" Removes the asset from the token\\'s pending asset array.\"]\n    #[doc = \" # Requirements:\"]\n    #[doc =\n    \"  * The caller must own the token or be approved to manage the token\\'s assets\"]\n    #[doc = \"  * `tokenId` must exist.\"]\n    #[doc = \"  * `assetId` must be in the pending_asset list.\"]\n    #[doc = \" # Arguments\"]\n    #[doc =\n    \"  * tokenId ID of the token for which to accept the pending asset\"]\n    #[doc =\n    \"  * assetId ID of the asset expected to be in the pending_asset list.\"]\n    #[doc = \" Emits a {AssetRejected} event.\"] #[ink(message)]\n    #[ink(selector = 3017955977u32)] fn\n    reject_asset(& mut self, token_id : Id, asset_id : AssetId) -> Result <\n    (), PSP34Error > ;\n    #[doc =\n    \" Used to specify the priorities for a given token\\'s active assets.\"]\n    #[doc =\n    \" If the length of the priorities array doesn\\'t match the length of the active assets array, the execution\"]\n    #[doc = \"  will be reverted.\"]\n    #[doc =\n    \" The position of the priority value in the array corresponds the position of the asset in the active\"]\n    #[doc = \"  assets array it will be applied to.\"] #[doc = \" # Arguments\"]\n    #[doc =\n    \"  * tokenId ID of the token for which the priorities are being set\"]\n    #[doc = \"  * priorities Array of priorities for the assets\"]\n    #[doc = \" Emits a {AssetPrioritySet} event.\"] #[ink(message)]\n    #[ink(selector = 534646445u32)] fn\n    set_priority(& mut self, token_id : Id, priorities : Vec < AssetId >) ->\n    Result < (), PSP34Error > ;\n    #[doc = \" Used to retrieve the total number of assets.\"]\n    #[doc = \" # Returns\"] #[doc = \"  * u64 The total number of assets\"]\n    #[ink(message)] #[ink(selector = 2603022040u32)] fn total_assets(& self)\n    -> u32 ; #[doc = \" Used to retrieve asset\\'s uri\"] #[ink(message)]\n    #[ink(selector = 3061299292u32)] fn\n    get_asset_uri(& self, asset_id : AssetId) -> Option < String > ;\n    #[doc = \" Used to retrieve the total number of assets per token\"]\n    #[ink(message)] #[ink(selector = 1381573283u32)] fn\n    total_token_assets(& self, token_id : Id) -> Result < (u64, u64),\n    PSP34Error > ; #[doc = \" Fetch all accepted assets for the token_id\"]\n    #[ink(message)] #[ink(selector = 1985933539u32)] fn\n    get_accepted_token_assets(& self, token_id : Id) -> Result < Option < Vec\n    < AssetId > >, PSP34Error > ;\n    #[doc = \" Remove the assets for the list of token assets\"] #[ink(message)]\n    #[ink(selector = 4257063468u32)] fn\n    remove_asset(& mut self, token_id : Id, asset_id : AssetId) -> Result <\n    (), PSP34Error > ; #[doc = \" Check that asset id does not already exist.\"]\n    fn ensure_asset_id_is_available(& self, asset_id : AssetId) -> Result <\n    (), PSP34Error > ;\n}"